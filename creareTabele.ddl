-- Generated by Oracle SQL Developer Data Modeler 24.3.0.240.1210
--   at:        2024-12-16 12:25:01 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE clienti (
    client_id    NUMBER(5) NOT NULL,
    nume         VARCHAR2(30) NOT NULL,
    prenume      VARCHAR2(30) NOT NULL,
    email        VARCHAR2(50),
    telefon      VARCHAR2(30) NOT NULL,
    adresa       VARCHAR2(100),
    alte_detalii VARCHAR2(200)
)
LOGGING;

ALTER TABLE clienti
    ADD CONSTRAINT clienti_email_ck CHECK ( REGEXP_LIKE ( email,
                                                          '^[a-z0-9._%-]+@[a-z0-9.-]+\.[a-z]{2,4}$' ) );

ALTER TABLE clienti ADD CONSTRAINT clienti_pk PRIMARY KEY ( client_id );

ALTER TABLE clienti ADD CONSTRAINT clienti_email_un UNIQUE ( email );

CREATE TABLE col_ev_fk (
    eveniment_id     NUMBER(5) NOT NULL,
    colaborator_id   NUMBER(2) NOT NULL,
    pret_colaborator NUMBER(10, 2) NOT NULL
)
LOGGING;

ALTER TABLE col_ev_fk ADD CONSTRAINT col_ev_pret_colaborator_ck CHECK ( pret_colaborator >= 0 );

ALTER TABLE col_ev_fk ADD CONSTRAINT col_ev_fk_pk PRIMARY KEY ( eveniment_id,
                                                                colaborator_id );

CREATE TABLE colaboratori (
    colaborator_id NUMBER(2) NOT NULL,
    nume           VARCHAR2(30) NOT NULL,
    prenume        VARCHAR2(30) NOT NULL,
    email          VARCHAR2(50),
    telefon        VARCHAR2(20) NOT NULL,
    alte_detalii   VARCHAR2(200)
)
LOGGING;

ALTER TABLE colaboratori
    ADD CONSTRAINT colaboratori_email_ck CHECK ( REGEXP_LIKE ( email,
                                                               '^[a-z0-9._%-]+@[a-z0-9.-]+\.[a-z]{2,4}$' ) );

ALTER TABLE colaboratori ADD CONSTRAINT colaboratori_pk PRIMARY KEY ( colaborator_id );

ALTER TABLE colaboratori ADD CONSTRAINT colaboratori_email_un UNIQUE ( email );

CREATE TABLE evenimente (
    eveniment_id   NUMBER(5) NOT NULL,
    client_id      NUMBER(5) NOT NULL,
    data_eveniment DATE NOT NULL,
    tip_eveniment  VARCHAR2(40) NOT NULL,
    pret_eveniment NUMBER(10, 2) NOT NULL,
    avans          NUMBER(10, 2) NOT NULL,
    durata         NUMBER(3, 1) NOT NULL,
    stare          VARCHAR2(20),
    alte_detalii   VARCHAR2(200)
)
LOGGING;

ALTER TABLE evenimente ADD CONSTRAINT evenimente_pret_eveniment_ck CHECK ( pret_eveniment >= 0 );

ALTER TABLE evenimente ADD CONSTRAINT evenimente_avans_ck CHECK ( avans >= 0 );

ALTER TABLE evenimente ADD CONSTRAINT evenimente_durata_ck CHECK ( durata > 0 );

ALTER TABLE evenimente ADD CONSTRAINT evenimente_pk PRIMARY KEY ( eveniment_id );

CREATE TABLE loc_ev_fk (
    eveniment_id NUMBER(5) NOT NULL,
    locatie_id   NUMBER(5) NOT NULL,
    nr_locatie   NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE loc_ev_fk
    ADD CONSTRAINT loc_ev_nr_locatii_ck CHECK ( nr_locatie BETWEEN 1 AND 15 );

ALTER TABLE loc_ev_fk ADD CONSTRAINT loc_ev_fk_pk PRIMARY KEY ( eveniment_id,
                                                                locatie_id );

CREATE TABLE locatii (
    locatie_id   NUMBER(5) NOT NULL,
    nume_locatie VARCHAR2(50) NOT NULL,
    adresa       VARCHAR2(100) NOT NULL,
    telefon      VARCHAR2(20) NOT NULL,
    alte_detalii VARCHAR2(200)
)
LOGGING;

ALTER TABLE locatii ADD CONSTRAINT locatii_pk PRIMARY KEY ( locatie_id );

CREATE TABLE materiale (
    eveniment_id  NUMBER(5) NOT NULL,
    nr_fotografii NUMBER(5) NOT NULL,
    link_foto     VARCHAR2(100),
    durata_video  NUMBER(5, 1) NOT NULL,
    link_video    VARCHAR2(100),
    alte_detalii  VARCHAR2(200)
)
LOGGING;

ALTER TABLE materiale ADD CONSTRAINT materiale_pk PRIMARY KEY ( eveniment_id );

ALTER TABLE col_ev_fk
    ADD CONSTRAINT col_ev_fk_colaboratori_fk
        FOREIGN KEY ( colaborator_id )
            REFERENCES colaboratori ( colaborator_id )
            NOT DEFERRABLE;

ALTER TABLE col_ev_fk
    ADD CONSTRAINT col_ev_fk_evenimente_fk
        FOREIGN KEY ( eveniment_id )
            REFERENCES evenimente ( eveniment_id )
            NOT DEFERRABLE;

ALTER TABLE evenimente
    ADD CONSTRAINT evenimente_clienti_fk
        FOREIGN KEY ( client_id )
            REFERENCES clienti ( client_id )
            NOT DEFERRABLE;

ALTER TABLE loc_ev_fk
    ADD CONSTRAINT loc_ev_fk_evenimente_fk
        FOREIGN KEY ( eveniment_id )
            REFERENCES evenimente ( eveniment_id )
            NOT DEFERRABLE;

ALTER TABLE loc_ev_fk
    ADD CONSTRAINT loc_ev_fk_locatii_fk
        FOREIGN KEY ( locatie_id )
            REFERENCES locatii ( locatie_id )
            NOT DEFERRABLE;

ALTER TABLE materiale
    ADD CONSTRAINT materiale_evenimente_fk
        FOREIGN KEY ( eveniment_id )
            REFERENCES evenimente ( eveniment_id )
            NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER " trg_Evenimente_BRIU" 
    BEFORE INSERT OR UPDATE ON Evenimente 
    FOR EACH ROW 
BEGIN
	IF( :new.Data_Eveniment <= SYSDATE )
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Data invalida: ' || TO_CHAR( :new.Data_Eveniment, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai mare decat data curenta.' );
	END IF;
END; 
/

CREATE SEQUENCE clienti_client_id_seq START WITH 3000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER clienti_client_id_trg BEFORE
    INSERT ON clienti
    FOR EACH ROW
    WHEN ( new.client_id IS NULL )
BEGIN
    :new.client_id := clienti_client_id_seq.nextval;
END;
/

CREATE SEQUENCE colaboratori_colaborator_id START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER colaboratori_colaborator_id BEFORE
    INSERT ON colaboratori
    FOR EACH ROW
    WHEN ( new.colaborator_id IS NULL )
BEGIN
    :new.colaborator_id := colaboratori_colaborator_id.nextval;
END;
/

CREATE SEQUENCE evenimente_eveniment_id_seq START WITH 40000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER evenimente_eveniment_id_trg BEFORE
    INSERT ON evenimente
    FOR EACH ROW
    WHEN ( new.eveniment_id IS NULL )
BEGIN
    :new.eveniment_id := evenimente_eveniment_id_seq.nextval;
END;
/

CREATE SEQUENCE locatii_locatie_id_seq START WITH 200 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER locatii_locatie_id_trg BEFORE
    INSERT ON locatii
    FOR EACH ROW
    WHEN ( new.locatie_id IS NULL )
BEGIN
    :new.locatie_id := locatii_locatie_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             7
-- CREATE INDEX                             0
-- ALTER TABLE                             22
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           5
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          4
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
